#ifndef IXFEVENT_H
#define IXFEVENT_H

#ifndef NULL
    #define NULL (0)
#endif

class IXFReactive;


/**
 * Base class for all types of events and timeouts.
 *
 * Requirements:
 * - Needs to hold a property which allows to distinguish between different
 *   types of events (#_eventType).
 * - Use an enumeration to define the type for the event type property (#eEventType).
 * - The event type property needs to be set at initialization time and cannot be
 *   changed afterwards.
 */
class XFEvent
{
public:
	/**
	 * Defines the types of events
	 */
	typedef enum
	{
		Unknown			= 0,		///< Unknown state (not initialized).
		Initial			= 1,		///< Initial pseudostate.
		NullTransition	= 2,		///< Event generated by the state machine to define a null transition.
		Event			= 3,		///< Normal event.
		Timeout			= 4,		///< Defines a timeout event.
		Terminate		= -1		///< Defines a terminate state. Will end the state machine.
	} eEventType;

public :
	/**
	 * Default class constructor
	 */
	XFEvent(eEventType eventType, int id, IXFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) {}
	virtual ~XFEvent() {}		///< Class destructor

	/** \brief Returns the type of the event.
	 *
	 * Can be used to distinguish between an event or a timeout.
	 */
	inline eEventType getEventType() const { return _eventType; }

	/** \brief Returns pointer to behavioral class.
	 *
	 * Returns a pointer to the behavioral class processing the event (see #_pBehavior).
	 */
	inline IXFReactive * getBehavior() const { return _pBehavior; }

	/** \brief Sets pointer to behavioral class (see #_pBehavior).
	 * Sets the behavior in which the event should be executed.
	 */
	inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }

	inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.

    virtual bool deleteAfterConsume() { return false; }	///< Tells the dispatcher if the event must be deleted or not

protected:
    const eEventType _eventType;		///< Holds the type of the event.
    int _id;
    ///< Event id

	IXFReactive * _pBehavior;			///< Pointer to behavioral class processing the event.
};

#endif // IXFEVENT_H
